// <auto-generated />
using System;
using DesafioConta.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DesafioConta.Infra.Migrations
{
    [DbContext(typeof(CheckingAccountsContext))]
    [Migration("20201114180310_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DesafioConta.Domain.Accounts.CheckingAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Agency")
                        .HasColumnType("int")
                        .HasColumnName("Agency");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastMonetization")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("Number");

                    b.HasKey("Id");

                    b.ToTable("CheckingAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("911d8b02-5732-407b-ac42-201305bacfb3"),
                            Agency = 1,
                            Balance = 500m,
                            CreationDate = new DateTime(2020, 10, 30, 15, 3, 9, 967, DateTimeKind.Local).AddTicks(4482),
                            LastMonetization = new DateTime(2020, 10, 30, 15, 3, 9, 968, DateTimeKind.Local).AddTicks(2095),
                            Number = 1
                        });
                });

            modelBuilder.Entity("DesafioConta.Domain.Accounts.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CheckingAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CheckingAccountId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1b0a055-7723-4113-ba52-f4e96028b68b"),
                            CheckingAccountId = new Guid("911d8b02-5732-407b-ac42-201305bacfb3"),
                            CreationDate = new DateTime(2020, 11, 14, 15, 3, 9, 970, DateTimeKind.Local).AddTicks(539)
                        });
                });

            modelBuilder.Entity("DesafioConta.Domain.Accounts.OperationsHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal");

                    b.Property<Guid>("CheckingAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Operation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckingAccountId");

                    b.ToTable("OperationsHistory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb4e2ad7-b88a-497c-b236-0df47d59fe53"),
                            Amount = 100m,
                            CheckingAccountId = new Guid("911d8b02-5732-407b-ac42-201305bacfb3"),
                            CreationDate = new DateTime(2020, 11, 7, 15, 3, 9, 969, DateTimeKind.Local).AddTicks(1950),
                            Operation = 0
                        },
                        new
                        {
                            Id = new Guid("783db41b-b903-4dee-8ac7-5dd54eb62c24"),
                            Amount = 400m,
                            CheckingAccountId = new Guid("911d8b02-5732-407b-ac42-201305bacfb3"),
                            CreationDate = new DateTime(2020, 11, 9, 15, 3, 9, 969, DateTimeKind.Local).AddTicks(2814),
                            Operation = 0
                        });
                });

            modelBuilder.Entity("DesafioConta.Domain.Accounts.Customer", b =>
                {
                    b.HasOne("DesafioConta.Domain.Accounts.CheckingAccount", "CheckingAccount")
                        .WithOne("Customer")
                        .HasForeignKey("DesafioConta.Domain.Accounts.Customer", "CheckingAccountId")
                        .IsRequired();

                    b.OwnsOne("DesafioConta.Domain.Accounts.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Bairro")
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Bairro");

                            b1.Property<string>("Cep")
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Cep");

                            b1.Property<string>("Cidade")
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Complemento")
                                .HasColumnType("varchar(250)")
                                .HasColumnName("Complemento");

                            b1.Property<string>("Estado")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Estado");

                            b1.Property<string>("Logradouro")
                                .HasColumnType("varchar(200)")
                                .HasColumnName("Logradouro");

                            b1.Property<string>("Numero")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Numero");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.HasData(
                                new
                                {
                                    CustomerId = new Guid("f1b0a055-7723-4113-ba52-f4e96028b68b"),
                                    Bairro = "Money",
                                    Cep = "94064340",
                                    Cidade = "Porto Alegre",
                                    Complemento = "Casa",
                                    Estado = "RS",
                                    Logradouro = "Warren Street",
                                    Numero = "123"
                                });
                        });

                    b.OwnsOne("DesafioConta.Domain.Accounts.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("varchar(11)")
                                .HasColumnName("Cpf");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.HasData(
                                new
                                {
                                    CustomerId = new Guid("f1b0a055-7723-4113-ba52-f4e96028b68b"),
                                    Number = "34074230046"
                                });
                        });

                    b.OwnsOne("DesafioConta.Domain.Accounts.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasColumnType("varchar(254)")
                                .HasColumnName("Email");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.HasData(
                                new
                                {
                                    CustomerId = new Guid("f1b0a055-7723-4113-ba52-f4e96028b68b"),
                                    Address = "warren@buffet.com"
                                });
                        });

                    b.OwnsOne("DesafioConta.Domain.Accounts.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.HasData(
                                new
                                {
                                    CustomerId = new Guid("f1b0a055-7723-4113-ba52-f4e96028b68b"),
                                    FirstName = "Warren",
                                    LastName = "Buffet"
                                });
                        });

                    b.Navigation("Address");

                    b.Navigation("CheckingAccount");

                    b.Navigation("Cpf");

                    b.Navigation("Email");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("DesafioConta.Domain.Accounts.OperationsHistory", b =>
                {
                    b.HasOne("DesafioConta.Domain.Accounts.CheckingAccount", "CheckingAccount")
                        .WithMany("OperationsHistory")
                        .HasForeignKey("CheckingAccountId")
                        .IsRequired();

                    b.Navigation("CheckingAccount");
                });

            modelBuilder.Entity("DesafioConta.Domain.Accounts.CheckingAccount", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("OperationsHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
